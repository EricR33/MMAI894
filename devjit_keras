import cv2
import numpy as np
import os
import random
import h5py
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D


data_directory = "C:/Users/Devjit/PycharmProjects/894_concrete/data/"  # insert directory
input_img_size = 128
categories = ["Positive", "Negative"]
training_data = []


def create_training_data():
    for category in categories:
        path = os.path.join(data_directory, category)
        class_num = categories.index(category)

        # read and resize the images 
        for img in os.listdir(path):
            img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)
            new_array = cv2.resize(img_array, (input_img_size, input_img_size))
            training_data.append([new_array, class_num])



create_training_data()

X_data_features = []
y = []

# create labelled features
for features, label in training_data:
    X_data_features.append(features)
    y.append(label)
# reshape the image
X = np.array(X_data_features).reshape(len(X_data_features), input_img_size, input_img_size, 1)
#output to folder
hf = h5py.File("C:/Users/Devjit/PycharmProjects/894_concrete/data/concrete_crack_image_data.h5",'w')
hf.create_dataset("X_concrete", data=X, compression="gzip")
hf.create_dataset("y_concrete", data=y, compression="gzip")
hf.close()


hf = h5py.File("C:/Users/Devjit/PycharmProjects/894_concrete/data/concrete_crack_image_data.h5", 'r') 
X = np.array(hf.get('X_concrete'))
y = np.array(hf.get("y_concrete"))
hf.close()


X = X / 255

model = tf.keras.Sequential()

model.add(Conv2D(32, (2, 2), activation = "relu", input_shape = (input_img_size, input_img_size, 1)))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(.1))

model.add(Conv2D(32, (2, 2), activation = "relu"))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(.1))

model.add(Conv2D(32, (2, 2), activation = "relu"))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(.1))

model.add(Flatten())
model.add(Dense(64, activation = "relu"))

model.add(Dense(1, activation = "sigmoid"))



model.compile(loss = "binary_crossentropy", optimizer = "adam", metrics = ["accuracy"])

model.fit(X, y, batch_size = 256, epochs = 3, validation_split = .3)

model.save("C:/Users/Devjit/PycharmProjects/894_concrete/data//Concrete_Crack_Classification_model.model") #Replace the dots with the directory you want to save the model in

